{"version":3,"sources":["components/shared-components/AlertMessage/index.js","redux/selectors/Pockemons.js","assets/img/Field.jpg","views/app-views/pages/optional-task/Field.js","views/app-views/pages/optional-task/PockemonsList.js","views/app-views/pages/optional-task/index.js","utils/FileFunctions.js"],"names":["AlertMessage","isError","message","onClose","type","closable","style","position","zIndex","top","left","minWidth","maxWidth","width","selectPockemons","state","pockemons","selectLoading","loading","selectShowMessage","showMessage","selectMessage","Field","selectedPockemons","setPosition","wrapperStyle","backgroundImage","fieldImg","backgroundRepeat","backgroundSize","height","draggebleStyle","cursor","overflow","imageStyle","pointerEvents","map","item","i","bounds","onStop","e","ui","id","x","y","handleDrag","defaultPosition","coords","src","img","alt","name","PockemonsList","addPockemonHandler","deletePockemonHandler","cursorAutoStyle","cursorPointerStyle","itemLayout","dataSource","renderItem","pocke","Item","actions","onClick","Meta","avatar","shape","size","title","description","stopPropagation","icon","CloseOutlined","OptionalTask","dispatch","useDispatch","useSelector","errorMessage","useState","setSelectedPockemons","useEffect","fetchingPockemons","setPositionFromFile","data","forEach","PockemonData","find","p","pockemonDataWithNewCoords","changePockemonsCoords","prev","closeError","spinning","span","display","justifyContent","filename","json","JSON","stringify","blob","Blob","txtURL","window","URL","createObjectURL","tempLink","document","createElement","href","setAttribute","click","saveDataToTXT","filter","htmlFor","className","onChange","files","file","setHandler","reader","FileReader","readAsText","onload","newData","parse","result","onerror","console","log","error","setDataFromTXT","target","pockemon"],"mappings":"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","file":"static/js/15.1f781c0a.chunk.js","sourcesContent":["import { Alert } from 'antd';\r\nimport React from 'react';\r\n\r\nconst AlertMessage = ({ isError, message, onClose }) => {\r\n  return (\r\n    <div>\r\n      {isError && (\r\n        <Alert\r\n          message={message}\r\n          type=\"error\"\r\n          closable\r\n          onClose={onClose}\r\n          style={{\r\n            position: 'absolute',\r\n            zIndex: 2000,\r\n            top: 0,\r\n            left: 0,\r\n            minWidth: '150px',\r\n            maxWidth: '500px',\r\n            width: '100%',\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlertMessage;\r\n","export const selectPockemons = (state) => state.pockemons.pockemons;\r\nexport const selectLoading = (state) => state.pockemons.loading;\r\nexport const selectShowMessage = (state) => state.pockemons.showMessage;\r\nexport const selectMessage = (state) => state.pockemons.message;\r\n","export default __webpack_public_path__ + \"static/media/Field.c5de4dce.jpg\";","import React from 'react';\r\nimport Draggable from 'react-draggable';\r\nimport fieldImg from '../../../../assets/img/Field.jpg';\r\n\r\nconst Field = ({ selectedPockemons, setPosition }) => {\r\n  const handleDrag = (item, ui) => {\r\n    const id = item.id;\r\n\r\n    setPosition(id, {\r\n      x: ui.x,\r\n      y: ui.y,\r\n    });\r\n  };\r\n  const wrapperStyle = {\r\n    backgroundImage: `url(${fieldImg})`,\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundSize: '100% auto ',\r\n    width: '900px',\r\n    height: '672px',\r\n  };\r\n  const draggebleStyle = {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    cursor: 'move',\r\n    width: '100px',\r\n    height: '100px',\r\n    overflow: 'hidden',\r\n  };\r\n  const imageStyle = {\r\n    width: '100px',\r\n    height: '100px',\r\n    pointerEvents: 'none',\r\n  };\r\n  return (\r\n    <div style={wrapperStyle}>\r\n      {selectedPockemons.map((item, i) => (\r\n        <Draggable\r\n          bounds=\"parent\"\r\n          onStop={(e, ui) => handleDrag(item, ui)}\r\n          key={`${item.id}` + i}\r\n          defaultPosition={item.coords ? item.coords : { x: 0, y: 0 }}>\r\n          <div id={item.id} style={draggebleStyle}>\r\n            <img src={item.img} alt={item.name} style={imageStyle} />\r\n          </div>\r\n        </Draggable>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Field;\r\n","import Avatar from 'antd/lib/avatar/avatar';\r\nimport { List, Button } from 'antd';\r\nimport { CloseOutlined } from '@ant-design/icons';\r\n\r\nimport React from 'react';\r\n\r\nconst PockemonsList = ({\r\n  pockemons,\r\n  addPockemonHandler,\r\n  deletePockemonHandler,\r\n}) => {\r\n  const cursorAutoStyle = {\r\n    cursor: 'auto',\r\n  };\r\n  const cursorPointerStyle = {\r\n    cursor: 'pointer',\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <List\r\n        itemLayout=\"horizontal\"\r\n        dataSource={pockemons}\r\n        renderItem={(pocke) => (\r\n          <List.Item\r\n            actions={[]}\r\n            onClick={() => addPockemonHandler(pocke)}\r\n            style={pocke.coords ? cursorAutoStyle : cursorPointerStyle}>\r\n            <List.Item.Meta\r\n              avatar={\r\n                <Avatar\r\n                  shape={'square'}\r\n                  size={50}\r\n                  src={pocke.img}\r\n                  alt={pocke.name}></Avatar>\r\n              }\r\n              title={pocke.name}\r\n              description={\r\n                pocke.coords\r\n                  ? `x:${pocke.coords.x} y:${pocke.coords.y}`\r\n                  : 'Выбери меня'\r\n              }\r\n            />\r\n            {pocke.coords ? (\r\n              <Button\r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  deletePockemonHandler(pocke);\r\n                }}\r\n                type=\"primary\"\r\n                size={'small'}\r\n                icon={<CloseOutlined />}\r\n              />\r\n            ) : null}\r\n          </List.Item>\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PockemonsList;\r\n","import { Col, Row, Spin, Button, Input } from 'antd';\r\nimport AlertMessage from 'components/shared-components/AlertMessage';\r\nimport { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  changePockemonsCoords,\r\n  closeError,\r\n  fetchingPockemons,\r\n} from 'redux/actions/Pockemons';\r\nimport {\r\n  selectLoading,\r\n  selectMessage,\r\n  selectPockemons,\r\n  selectShowMessage,\r\n} from 'redux/selectors/Pockemons';\r\nimport { saveDataToTXT, setDataFromTXT } from 'utils/FileFunctions';\r\nimport Field from './Field';\r\nimport PockemonsList from './PockemonsList';\r\n\r\nconst OptionalTask = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const pockemons = useSelector(selectPockemons);\r\n  const loading = useSelector(selectLoading);\r\n  const isError = useSelector(selectShowMessage);\r\n  const errorMessage = useSelector(selectMessage);\r\n\r\n  const [selectedPockemons, setSelectedPockemons] = useState([]);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchingPockemons());\r\n  }, [dispatch]);\r\n\r\n  const onAlertCloseHandler = () => {\r\n    dispatch(closeError());\r\n  };\r\n  const addPockemonHandler = (pockemon) => {\r\n    if (pockemon.coords === null) {\r\n      const pockemonDataWithNewCoords = { ...pockemon, coords: { x: 0, y: 0 } };\r\n\r\n      dispatch(changePockemonsCoords(pockemonDataWithNewCoords));\r\n\r\n      setSelectedPockemons((prev) => [...prev, pockemon]);\r\n    }\r\n  };\r\n  const deletePockemonHandler = (pockemon) => {\r\n    if (pockemon.coords !== null) {\r\n      const pockemonDataWithNewCoords = { ...pockemon, coords: null };\r\n\r\n      dispatch(changePockemonsCoords(pockemonDataWithNewCoords));\r\n\r\n      setSelectedPockemons((prev) =>\r\n        prev.filter((pocke) => pocke.id !== pockemon.id)\r\n      );\r\n    }\r\n  };\r\n\r\n  const setPositionHandler = (id, position) => {\r\n    setSelectedPockemons((prev) =>\r\n      prev.map((p) => (p.id === id ? { ...p, coords: position } : p))\r\n    );\r\n\r\n    const PockemonData = pockemons.find((p) => +p.id === +id);\r\n\r\n    const pockemonDataWithNewCoords = { ...PockemonData, coords: position };\r\n\r\n    dispatch(changePockemonsCoords(pockemonDataWithNewCoords));\r\n  };\r\n\r\n  const saveHandler = () => {\r\n    const coords = pockemons.map((pocke) => ({\r\n      id: pocke.id,\r\n      coords: pocke.coords,\r\n    }));\r\n\r\n    const filteredCoords = coords.filter((p) => p.coords);\r\n\r\n    saveDataToTXT(filteredCoords, 'coordinates');\r\n  };\r\n\r\n  const uploadHandler = (files) => {\r\n    const file = files.target.files[0];\r\n\r\n    setDataFromTXT(file, setPositionFromFile);\r\n  };\r\n\r\n  const setPositionFromFile = (data) => {\r\n    setSelectedPockemons([]);\r\n\r\n    data.forEach(({ id, coords }) => {\r\n      if (coords) {\r\n        const PockemonData = pockemons.find((p) => +p.id === +id);\r\n        const pockemonDataWithNewCoords = { ...PockemonData, coords: coords };\r\n\r\n        dispatch(changePockemonsCoords(pockemonDataWithNewCoords));\r\n\r\n        setSelectedPockemons((prev) => [...prev, pockemonDataWithNewCoords]);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <AlertMessage\r\n        isError={isError}\r\n        message={errorMessage}\r\n        onClose={onAlertCloseHandler}\r\n      />\r\n      <Spin size=\"large\" spinning={loading}>\r\n        <Row>\r\n          <Col span={6}>\r\n            <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n              <Button type=\"primary\" onClick={saveHandler}>\r\n                Сохранить\r\n              </Button>\r\n\r\n              <label\r\n                htmlFor=\"uploadCoords\"\r\n                className={'ant-btn ant-btn-primary'}>\r\n                Загрузить\r\n              </label>\r\n              <Input\r\n                style={{ display: 'none' }}\r\n                name=\"uploadCoords\"\r\n                id=\"uploadCoords\"\r\n                type=\"file\"\r\n                onChange={uploadHandler}></Input>\r\n            </div>\r\n\r\n            <PockemonsList\r\n              pockemons={pockemons}\r\n              addPockemonHandler={addPockemonHandler}\r\n              deletePockemonHandler={deletePockemonHandler}\r\n            />\r\n          </Col>\r\n          <Col span={18}>\r\n            <Field\r\n              selectedPockemons={selectedPockemons}\r\n              setPosition={setPositionHandler}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Spin>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OptionalTask;\r\n","export const saveDataToTXT = (data, filename = 'file') => {\r\n  const json = JSON.stringify(data);\r\n\r\n  const blob = new Blob([json], {\r\n      type: 'text/txt',\r\n    }),\r\n    txtURL = window.URL.createObjectURL(blob),\r\n    tempLink = document.createElement('a');\r\n\r\n  tempLink.href = txtURL;\r\n  tempLink.setAttribute('download', `${filename}.txt`);\r\n  tempLink.click();\r\n};\r\n\r\nexport const setDataFromTXT = (file, setHandler) => {\r\n  let reader = new FileReader();\r\n\r\n  reader.readAsText(file);\r\n\r\n  reader.onload = function () {\r\n    const newData = JSON.parse(reader.result);\r\n    setHandler(newData);\r\n  };\r\n\r\n  reader.onerror = function () {\r\n    console.log(reader.error);\r\n  };\r\n};\r\n"],"sourceRoot":""}